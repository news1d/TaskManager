from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types
from dispatcher import dp
import asyncio
import re
from bot import BotDB
from datetime import datetime, timedelta
import markups as nav
import sqlite3
import ast


# —Å–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –∑–∞–¥–∞—á–∏ –∏ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è
class Form(StatesGroup):
    task_name = State()
    description = State()
    deadline = State()
    del_name = State()
    fin_spent = State()
    fin_earned = State()


# —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥
@dp.message_handler(commands="start")
async def start(message: types.Message):
    if not BotDB.user_exists(message.from_user.id):
        BotDB.add_user(message.from_user.id)

    await message.bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –≥—Ä—É–ø–ø–æ–π –ö–°-38 'MUJIKI', " + \
                                   "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –†–•–¢–£ –∏–º. –î.–ò.–ú–µ–Ω–¥–µ–ª–µ–µ–≤–∞. " + \
                                   "\n–Ø —è–≤–ª—è—é—Å—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∑–∞–¥–∞—á.", reply_markup=nav.mainMenu)


@dp.message_handler()
async def main_handler(message: types.Message):
    # -------------------–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á------------------->
    if message.text == 'üìù –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á':
        notif = str(BotDB.getAlarm(message.from_user.id)).replace(',', '').replace('(', '').replace(')', '').replace("'", '').replace('[', '').replace(']', '')
        if notif == 'on':
            await message.bot.send_message(message.from_user.id, '–ú–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á', reply_markup=nav.taskMenu1)
        elif notif == 'off':
            await message.bot.send_message(message.from_user.id, '–ú–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á', reply_markup=nav.taskMenu)
        else:
            await message.bot.send_message(message.from_user.id, '–ú–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á', reply_markup=nav.taskMenu)

    elif message.text == 'üìå –î–æ–±–∞–≤–∏—Ç—å':
        await Form.task_name.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ", reply_markup=nav.canMenu)

    elif message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await message.bot.send_message(message.from_user.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=nav.mainMenu)

    elif message.text == '‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' or message.text == '‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':

        if message.text == '‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
            notif = "on"
            BotDB.addAlarm(message.from_user.id, notif)
            await message.bot.send_message(message.from_user.id, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!", reply_markup=nav.taskMenu1)
        elif message.text == '‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
            notif = "off"
            BotDB.addAlarm(message.from_user.id, notif)
            await message.bot.send_message(message.from_user.id, "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!", reply_markup=nav.taskMenu)

        while notif == 'on':

            deadline = BotDB.getTime(message.from_user.id)
            taskname = BotDB.getTaskname(message.from_user.id)
            notif = str(BotDB.getAlarm(message.from_user.id)).replace(',', '').replace('(', '').replace(')','').replace("'",'').replace('[', '').replace(']', '')

            i = 0
            while i < len(deadline):
                time_30 = datetime.now() + timedelta(minutes=30)
                time_5 = datetime.now() + timedelta(minutes=5)
                time_deadline = datetime.now()

                name = str(taskname[i])
                name = name.replace(',', '').replace('(', '').replace(')', '').replace("'", '')

                alarm = str(deadline[i])
                alarm = alarm.replace(',', '').replace('(', '').replace(')', '').replace("'", '')
                alarm = datetime.strptime(alarm, '%d-%m %H:%M')

                i += 1

                if time_30.strftime("%d-%m %H:%M") == alarm.strftime('%d-%m %H:%M'):
                    answer = '‚ùå–î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏ "' + str(name) + '" –æ—Å—Ç–∞–ª–æ—Å—å 30 –º–∏–Ω—É—Ç!‚ùå'
                    await message.bot.send_message(message.from_user.id, answer)
                    await asyncio.sleep(60)
                elif time_5.strftime("%d-%m %H:%M") == alarm.strftime('%d-%m %H:%M'):
                    answer = '‚ùå–î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏ "' + str(name) + '" –æ—Å—Ç–∞–ª–æ—Å—å 5 –º–∏–Ω—É—Ç!‚ùå'
                    await message.bot.send_message(message.from_user.id, answer)
                    await asyncio.sleep(60)
                elif time_deadline.strftime("%d-%m %H:%M") == alarm.strftime('%d-%m %H:%M'):
                    answer = '‚ùå–î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ "' + str(name) + '"!‚ùå'
                    await message.bot.send_message(message.from_user.id, answer)
                    await asyncio.sleep(60)

            await asyncio.sleep(1)

    elif message.text == 'üìÉ –°–ø–∏—Å–æ–∫':
        tasks = BotDB.getTasks(message.from_user.id)

        if len(tasks):
            count_tasks = len(tasks)
            answer1 = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á:  " + str(count_tasks) + "\n\n–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫:"
            await message.answer(answer1)
            i = 0
            for t in tasks:
                i += 1
                answer2 = "‚ùó–ó–∞–¥–∞—á–∞ #" + str(i) + \
                          "\n‚úè–ù–∞–∑–≤–∞–Ω–∏–µ: " + str(t[2]) + \
                          "\nüìÑ–û–ø–∏—Å–∞–Ω–∏–µ: " + str(t[3]) + \
                          "\nüïò–î–µ–¥–ª–∞–π–Ω: " + str(t[4]) + \
                          "\n\nID: " + str(t[0])

                await message.answer(answer2, reply_markup=nav.listMenu)
        else:
            await message.reply("–ó–∞–¥–∞—á –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")

    # -------------------–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä------------------->
    elif message.text == 'üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä':
        await message.bot.send_message(message.from_user.id, '–ú–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞', reply_markup=nav.finMenu)

    elif message.text == 'üìâ –í–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥—ã':
        await Form.fin_spent.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ", reply_markup=nav.canMenu)

    elif message.text == 'üìà –í–Ω–µ—Å—Ç–∏ –¥–æ—Ö–æ–¥—ã':
        await Form.fin_earned.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ", reply_markup=nav.canMenu)

    elif message.text == 'üóÇ –ò—Å—Ç–æ—Ä–∏—è':
        await message.bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–∏–æ–¥', reply_markup=nav.hisMenu)

    elif message.text == 'üîÑ –ù–∞–∑–∞–¥':
        await message.bot.send_message(message.from_user.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
                                       reply_markup=nav.finMenu)

    elif message.text == '1Ô∏è‚É£ –î–µ–Ω—å' or message.text == '7Ô∏è‚É£ –ù–µ–¥–µ–ª—è' or message.text == 'üî¢ –ú–µ—Å—è—Ü':

        if message.text == '1Ô∏è‚É£ –î–µ–Ω—å':
            within = 'day'
        elif message.text == '7Ô∏è‚É£ –ù–µ–¥–µ–ª—è':
            within = 'week'
        elif message.text == 'üî¢ –ú–µ—Å—è—Ü':
            within = 'month'

        records = BotDB.get_records(message.from_user.id, within)

        total_earned = 0
        total_spent = 0

        if len(records):
            if within == 'day':
                answer = f"üïò –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –¥–µ–Ω—å:\n\n"
            elif within == 'week':
                answer = f"üïò –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"
            elif within == 'month':
                answer = f"üïò –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –º–µ—Å—è—Ü:\n\n"

            for r in records:
                answer += "<b>" + ("‚ûñ –†–∞—Å—Ö–æ–¥" if not r[2] else "‚ûï –î–æ—Ö–æ–¥") + "</b>"
                answer += f" - {r[3]}"
                answer += f" <i>({r[4]})</i>\n"
                if r[2]:
                    total_earned += r[3]
                else:
                    total_spent += r[3]

            answer += f'\nüìà <b>–û–±—â–∏–π –¥–æ—Ö–æ–¥:</b> {total_earned}\nüìâ <b>–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥:</b> {total_spent}'

            await message.answer(answer)
        else:
            await message.reply("–ó–∞–ø–∏—Å–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")

    else:
        await message.reply("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã...")


# –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª
@dp.message_handler(commands='cancel')
@dp.message_handler(Text(equals='‚ùå –æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.finish()
    await message.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=nav.mainMenu)


@dp.message_handler(state=Form.fin_spent)
async def process_fin_spent(message: types.Message, state: FSMContext):
    operation = '-'
    value = message.text
    if len(value):
        x = re.findall(r"\d+(?:.\d+)?", value)
        if len(x):
            value = float(x[0].replace(',', '.'))

            BotDB.add_record(message.from_user.id, operation, value)

            await message.reply("‚úÖ –ó–∞–ø–∏—Å—å –æ <u><b>—Ä–∞—Å—Ö–æ–¥–µ</b></u> —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–∞!", reply_markup=nav.finMenu)

        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É!", reply_markup=nav.finMenu)
    else:
        await message.reply("–ù–µ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞!", reply_markup=nav.finMenu)
    await state.finish()


@dp.message_handler(state=Form.fin_earned)
async def process_fin_earned(message: types.Message, state: FSMContext):
    operation = '+'
    value = message.text
    if len(value):
        x = re.findall(r"\d+(?:.\d+)?", value)
        if len(x):
            value = float(x[0].replace(',', '.'))

            BotDB.add_record(message.from_user.id, operation, value)

            await message.reply("‚úÖ –ó–∞–ø–∏—Å—å –æ <u><b>–¥–æ—Ö–æ–¥–µ</b></u> —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–∞!", reply_markup=nav.finMenu)
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É!", reply_markup=nav.finMenu)
    else:
        await message.reply("–ù–µ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞!", reply_markup=nav.finMenu)
    await state.finish()


# TASK MANAGER --->
@dp.message_handler(state=Form.task_name)
async def process_taskname(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['task_name'] = message.text

    await Form.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")


@dp.message_handler(state=Form.description)
async def process_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text

    await Form.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú –ß–ß:–ú–ú:")


@dp.message_handler(state=Form.deadline)
async def process_deadline(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['deadline'] = message.text

        try:
            if datetime.strptime(data['deadline'], '%d-%m %H:%M'):
                task_name = data['task_name']
                description = data['description']
                deadline = data['deadline']

                BotDB.addTask(message.from_user.id, task_name, description, deadline)

                await state.finish()
                await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º '" + task_name + "' —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–∞!",
                                     reply_markup=nav.taskMenu)
        except Exception:
            await message.answer('–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö')


@dp.callback_query_handler(text='Delete')
async def task_delete(callback_query: types.CallbackQuery):
    temp_id = callback_query.message.text
    id = temp_id.split()[-1]
    BotDB.delTask(callback_query.from_user.id, id)
    await callback_query.message.delete()
    await callback_query.answer('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!')